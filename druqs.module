<?php

/**
 * @file
 * Druqs primary module file.
 *
 * TODO add proper search form for non-javascript users as well?
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_druqs_search().
 */
function druqs_druqs_search($args) {
  $items = [];

  // Get the module config.
  $sources = \Drupal::config('druqs.configuration')->get('search_sources');

  // Search for content.
  if (in_array('node', $sources)) {
    if ($args['results_current'] < $args['results_max']) {
      // Determine how many results we can still add.
      $limit = min($args['results_per_source'], $args['results_max'] - $args['results_current']);
      // Create query for node titles.
      $q = \Drupal::database()->select('node_field_data', 'n');
      $q->fields('n', ['nid', 'title', 'type']);
      $q->condition('n.title', '%' . $q->escapeLike($args['input']) . '%', 'LIKE');
      // And format the results.
      foreach ($q->range(0, $limit)->execute() as $record) {
        $items[] = [
          'type' => 'Content (' . Html::escape($record->type) . ')',
          'title' => Html::escape($record->title),
          'actions' => [
            'view' => '/node/' . $record->nid,
            'edit' => '/node/' . $record->nid . '/edit',
          ],
        ];
        // Increment the result counter.
        $args['results_current']++;
      }
    }
  }

  // Search for users.
  if (in_array('user', $sources)) {
    if ($args['results_current'] < $args['results_max']) {
      // Determine how many results we can still add.
      $limit = min($args['results_per_source'], $args['results_max'] - $args['results_current']);
      // Create query for node titles.
      $q = \Drupal::database()->select('users_field_data', 'u');
      $q->fields('u', ['uid', 'name']);
      $q->condition('u.name', '%' . $q->escapeLike($args['input']) . '%', 'LIKE');
      // And format the results.
      foreach ($q->range(0, $limit)->execute() as $record) {
        $items[] = [
          'type' => 'User',
          'title' => Html::escape($record->name),
          'actions' => [
            'view' => '/user/' . $record->uid,
            'edit' => '/user/' . $record->uid . '/edit',
          ],
        ];
        // Increment the result counter.
        $args['results_current']++;
      }
    }
  }

  // Search for taxonomy terms.
  if (in_array('taxonomy', $sources)) {
    if ($args['results_current'] < $args['results_max']) {
      // Determine how many results we can still add.
      $limit = min($args['results_per_source'], $args['results_max'] - $args['results_current']);
      // Create query for node titles.
      $q = \Drupal::database()->select('taxonomy_term_field_data', 't');
      $q->fields('t', ['tid', 'name', 'vid']);
      $q->condition('t.name', '%' . $q->escapeLike($args['input']) . '%', 'LIKE');
      // And format the results.
      foreach ($q->range(0, $limit)->execute() as $record) {
        $items[] = [
          'type' => 'Taxonomy (' . Html::escape($record->vid) . ')',
          'title' => Html::escape($record->name),
          'actions' => [
            'view' => '/taxonomy/term/' . $record->tid,
            'edit' => '/taxonomy/term/' . $record->tid . '/edit',
          ],
        ];
        // Increment the result counter.
        $args['results_current']++;
      }
    }
  }

  // Search for menus.
  foreach ($sources as $source) {
    if (substr($source, 0, 5) == 'menu_') {
      $menu_tree = \Drupal::menuTree();
      // Get menu name.
      $menu_name = substr($source, 5);
      // Load the tree without any params.
      $tree = $menu_tree->load($menu_name, new \Drupal\Core\Menu\MenuTreeParameters);
      // Transform the tree.
      $manipulators = array(
        // Only show links that are accessible for the current user.
        array('callable' => 'menu.default_tree_manipulators:checkAccess'),
        // Flatten the treen for easier searchability.
        array('callable' => 'menu.default_tree_manipulators:flatten'),
      );
      $tree = $menu_tree->transform($tree, $manipulators);
      // Loop over items.
      foreach ($tree as $item) {
        if (stripos($item->link->getTitle(), $args['input']) !== FALSE) {
          $items[] = [
            'type' => 'Menu (' . Html::escape($menu_name) . ')',
            'title' => Html::escape($item->link->getTitle()),
            'actions' => [
              'goto' => $item->link->getUrlObject()->toString(),
            ]
          ];
        }
      }
    }
  }

  return $items;
}

/**
 * Implements hook_help().
 */
function druqs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.druqs':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The druqs module offers quick search for content and more via the toolbar or a block. By default, it searches users, nodes and taxonomies, but can easily be extended with a built-in hook.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Search box placement') . '</dt>';
      $output .= '<dd>' . t('By default, the search box is added to the toolbar. Another option is using the block which ships with the module.') . '</dd>';
      $output .= '<dt>' . t('Configuring the module') . '</dt>';
      $output .= '<dd>' . t('You can select which type of content will be searched on <a href=":admin-druqs">the druqs configuration page</a>.', array(':admin-druqs' => Url::fromRoute('druqs.configuration')->toString())) . '</dd>';
      $output .= '<dt>' . t('Search for anything') . '</dt>';
      $output .= '<dd>' . t('Start typing in the druqs box to search for users, nodes, taxonomies, menus and more!') . '</dd>';
      $output .= '<dt>' . t('Keyboard Shortcut') . '</dt>';
      $output .= '<dd>' . t('Press ALT+S to automatically clear and focus the quick search field.') . '</dd>';
      $output .= '<dt>' . t('Permissions') . '</dt>';
      $output .= '<dd>' . t('Users with the <em>Administer druqs</em> permission can configure the module, users with the <em>Access druqs</em> permission can use the druqs.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function druqs_page_attachments(array &$attachments) {
  if (\Drupal::currentUser()->hasPermission('access druqs')) {
    $config = \Drupal::config('druqs.configuration');
    $cache_tags = isset($attachments['#cache']['tags']) ? $attachments['#cache']['tags'] : [];
    $attachments['#cache']['tags'] = Cache::mergeTags($cache_tags, $config->getCacheTags());

    $attachments['#attached']['library'][] = 'druqs/drupal.druqs';
    $attachments['#attached']['drupalSettings']['druqs'] = [
      'maxResults' => $config->get('max_results'),
    ];
  }
}

/**
 * Implements hook_hook_info().
 */
function druqs_hook_info() {
  return [
    'druqs_search' => [
      'group' => 'druqs',
    ],
  ];
}

/**
 * Implements hook_toolbar().
 */
function druqs_toolbar() {
  $items['druqs'] = [
    '#cache' => [
      'contexts' => ['user.permissions'],
    ],
  ];

  if (\Drupal::currentUser()->hasPermission('access druqs')) {
    $items['druqs'] += [
      '#weight' => -999,
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'search',
        '#attributes' => [
          'id' => 'druqs-input',
          'placeholder' => t('Quick search'),
        ],
        '#suffix' => '<div id="druqs-results"></div>',
      ],
      '#wrapper_attributes' => [
        'class' => ['druqs-tab'],
      ],
      '#attached' => [
        'library' => ['druqs/drupal.druqs'],
      ],
      '#attributes' => [
        'id' => 'druqs',
      ],
    ];
  }

  return $items;
}
